set-window-option -g mode-mouse off
set-option -g mouse-select-pane on

# Reload
bind R source-file ~/.tmux.conf

## Rebind the pane splitting bindings
#unbind %
#bind | split-window -h
#bind - split-window -v

# set the status-bar colors
set -g status-bg black
set -g status-fg white
set -g status-left '#[fg=green#H'
set -g status-right '#[fg=yellow]#(uptime | cut -d "," -f 2-)'

# Highlight active window
set-window-option -g window-status-current-bg red

# Set window notifications
setw -g monitor-activity on
set -g visual-activity on

# Automatically set window title
setw -g automatic-rename

# allow C-a ESC to enter copy mode, like screen
bind Escape copy-mode
# But don't bloody wait so long to see if it's a function key!
set -a escape-time 50
#set-option -s escape-time 50


## From tmux project directory "examples/screen-keys.conf",
## downloaded 18-Sept-2011.

# $Id: screen-keys.conf,v 1.7 2010-07-31 11:39:13 nicm Exp $
#
# By Nicholas Marriott. Public domain.
#
# This configuration file binds many of the common GNU screen key bindings to
# appropriate tmux key bindings. Note that for some key bindings there is no
# tmux analogue and also that this set omits binding some commands available in
# tmux but not in screen.
#
# Note this is only a selection of key bindings and they are in addition to the
# normal tmux key bindings. This is intended as an example not as to be used
# as-is.

# Set the prefix to ^A.
unbind C-b
set -g prefix ^A
bind a send-prefix

# Bind appropriate commands similar to screen.
# lockscreen ^X x 
unbind ^X
bind ^X lock-server
unbind x
bind x lock-server

# screen ^C c 
unbind ^C
bind ^C new-window
unbind c
bind c new-window

# detach ^D d
unbind ^D
bind ^D detach

# displays * 
unbind *
bind * list-clients

# next ^@ ^N sp n 
unbind ^@
bind ^@ next-window
unbind ^N
bind ^N next-window
unbind " "
bind " " next-window
unbind n
bind n next-window

# title A
unbind A
bind A command-prompt "rename-window %%"

# other ^A
unbind ^A
bind ^A last-window

# prev ^H ^P p ^? 
unbind ^H
bind ^H previous-window
unbind ^P
bind ^P previous-window
unbind p
bind p previous-window
unbind BSpace
bind BSpace previous-window

# windows ^W w 
unbind ^W
bind ^W list-windows
unbind w
bind w list-windows

# quit \ 
#unbind \
#bind \ confirm-before "kill-server"

# kill K k 
unbind K
bind K confirm-before "kill-window"
unbind k
bind k confirm-before "kill-window"

# redisplay ^L l 
unbind ^L
bind ^L refresh-client
unbind l
bind l refresh-client

# split -v |
unbind |
bind | split-window -h

# :kB: focus up
unbind Tab
bind -r Tab select-pane -t:.+
unbind BTab
bind -r BTab select-pane -t:.-

# " windowlist -b
unbind '"'
bind '"' choose-window

#####################################################

# $Id: vim-keys.conf,v 1.2 2010-09-18 09:36:15 nicm Exp $
#
# vim-keys.conf, v1.2 2010/09/12
#
# By Daniel Thau.  Public domain.
#
# This configuration file binds many vi- and vim-like bindings to the
# appropriate tmux key bindings.  Note that for many key bindings there is no
# tmux analogue.  This is intended for tmux 1.3, which handles pane selection
# differently from the previous versions

# split windows like vim
# vim's definition of a horizontal/vertical split is reversed from tmux's
bind s split-window -v
bind v split-window -h

# NOTE: disabled for older tmux
## move around panes with hjkl, as one would in vim after pressing ctrl-w
#bind h select-pane -L
#bind j select-pane -D
#bind k select-pane -U
#bind l select-pane -R

# resize panes like vim
# feel free to change the "1" to however many lines you want to resize by, only
# one at a time can be slow
bind -r < resize-pane -L 1
bind -r > resize-pane -R 1
bind -r - resize-pane -D 1
bind -r + resize-pane -U 1

# bind : to command-prompt like vim
# this is the default in tmux already
bind : command-prompt

# vi-style controls for copy mode
setw -g mode-keys vi

# This terminal setting inherits the properties of the outer terminal.
# If colors aren't working, the outer shell probably needs to be xterm-256color.
set-option -g default-terminal "xterm-256color"

# Override SSH_AUTH_SOCK to use a symlink to the sock of the most recent login
set-option -g update-environment "DISPLAY HOSTNAME SSH_ASKPASS SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY"
set-environment -g SSH_AUTH_SOCK "/tmp/ssh-auth-sock.$USER"

# Set higher window history
set -g history-limit 10000
